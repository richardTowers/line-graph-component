{"version":3,"sources":["Axis.tsx","Path.tsx","FullLineGraph.tsx","index.tsx"],"names":["Axis","props","ticks","positionOffset","type","reverse","Error","className","map","tick","style","Path","scaledPoints","points","p","line","join","viewBox","preserveAspectRatio","d","i","href","left","toFixed","top","FullLineGraph","ReactDOM","render","x0","y0","n","Array","x","y","Math","random","randomWalk","document","getElementById"],"mappings":"4TAGe,SAASA,EAAKC,GAC3B,IAAIC,EACAC,EACJ,OAAOF,EAAMG,MACX,IAAK,IACHF,EAAQD,EAAMC,MACdC,EAAiB,OACjB,MACF,IAAK,IACHD,EAAQD,EAAMC,MAAMG,UACpBF,EAAiB,SACjB,MACF,QACE,MAAM,IAAIG,MAAJ,4BAA+BL,EAAMG,OAE/C,OACE,yBAAKG,UAAS,gCAA2BN,EAAMG,OAC7CF,EAAMM,KAAI,SAAAC,GAAI,OACZ,yBAAKF,UAAU,wBAAwBG,MAAK,eAAIP,EAAJ,eAA6BM,EAA7B,eAAgDA,EAA5F,S,MClBO,SAASE,EAAKV,GAC3B,IAAMW,EAAeX,EAAMY,OAAOL,KAAI,SAAAM,GAAC,MAAI,CAAQ,IAAPA,EAAE,GAAiB,IAAPA,EAAE,OACpDC,EAAI,WAAOH,EAAaJ,KAAI,SAAAM,GAAC,gBAAOA,EAAE,GAAT,YAAeA,EAAE,OAAME,KAAK,MAE/D,OACE,6BACE,yBAAKT,UAAU,uBAAuBU,QAAQ,cAAcC,oBAAoB,QAC9E,0BAAMC,EAAGJ,KAEX,6BACGH,EAAaJ,KAAI,SAACM,EAAEM,GAAH,OAChB,uBAAGb,UAAU,gCAAgCc,KAAI,iBAAYD,GAAKV,MAAO,CAACY,KAAK,wBAAD,OAA0BF,EAA1B,iBAC5E,0BAAMb,UAAU,wCAAwC,IAAMO,EAAE,GAAG,KAAKS,QAAQ,GAAhF,KACA,0BAAMhB,UAAU,uCAAuCG,MAAO,CAACc,IAAI,QAAD,OAAUV,EAAE,GAAG,IAAf,qB,MCC/DW,MAZf,SAAuBxB,GACrB,OACE,yBAAKM,UAAU,4BACb,yBAAKA,UAAU,8BACb,kBAAC,EAAD,CAAMH,KAAK,IAAIF,MAAO,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAC9D,kBAAC,EAAD,CAAME,KAAK,IAAIF,MAAO,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,OAC9D,kBAAC,EAAD,CAAMW,OAAQZ,EAAMY,YCQ5Ba,IAASC,OAAO,CACd,0JAGA,oIACA,wHACA,kBAAC,EAAD,CAAed,OApBjB,SAAoBe,EAAYC,EAAYC,GAC1C,IAAMjB,EAAS,IAAIkB,MAAMD,GACrBE,EAAIJ,EACJK,EAAIJ,EACRhB,EAAO,GAAK,CAACmB,EAAGC,GAChB,IAAK,IAAIb,EAAI,EAAGA,EAAIU,EAAGV,IAGrBY,GADAA,GADAA,GAA6B,IAAvBE,KAAKC,SAAW,KACd,IAAM,IAAMH,GACZ,EAAI,EAAIA,EAChBC,GAAK,EACLpB,EAAOO,GAAK,CAACY,EAAGC,GAElB,OAAOpB,EAQgBuB,CAAW,GAAI,EAAG,OACxCC,SAASC,eAAe,W","file":"static/js/main.7eef3ccd.chunk.js","sourcesContent":["import React from 'react';\nimport './Axis.css';\n\nexport default function Axis(props: {type: 'x' | 'y', ticks: number[]}) {\n  let ticks;\n  let positionOffset: 'bottom' | 'left';\n  switch(props.type) {\n    case 'x':\n      ticks = props.ticks;\n      positionOffset = 'left';\n      break;\n    case 'y':\n      ticks = props.ticks.reverse();\n      positionOffset = 'bottom';\n      break;\n    default:\n      throw new Error(`Unrecognised type ${props.type}`);\n  }\n  return (\n    <div className={`govuk-line-graph-axis ${props.type}`}>{\n      ticks.map(tick => (\n        <div className='govuk-line-graph-tick' style={{[positionOffset]: `calc(${tick}% - 25px)`}}>{tick}%</div>\n      ))\n    }</div>\n  );\n}\n","import React from 'react';\nimport './Path.css';\n\nexport default function Path(props: {points: [number, number][]}) {\n  const scaledPoints = props.points.map(p => [p[0] * 3.2, p[1] * 9.6]);\n  const line = `M${scaledPoints.map(p => `${p[1]},${p[0]}`).join('L')}`;\n\n  return (\n    <div>\n      <svg className='govuk-line-data-path' viewBox='0 0 960 320' preserveAspectRatio='none'>\n        <path d={line} />\n      </svg>\n      <div>\n        {scaledPoints.map((p,i) => (\n          <a className='govuk-line-data-point-overlay' href={`#point-${i}`} style={{left: `calc((100% - 4rem) * ${i}/50 + 4rem)`}}>\n            <span className='govuk-line-data-point-overlay-value'>{(100 - p[0]/3.2).toFixed(2)}%</span>\n            <span className='govuk-line-data-point-overlay-marker' style={{top: `calc(${p[0]/3.2}% - 5px)`}}></span>\n          </a>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Axis from './Axis';\nimport Path from './Path';\nimport './FullLineGraph.css';\n\nfunction FullLineGraph(props: {points: [number, number][]}) {\n  return (\n    <div className='govuk-line-graph-wrapper'>\n      <div className='govuk-line-graph-container'>\n        <Axis type='x' ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}/>\n        <Axis type='y' ticks={[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}/>\n        <Path points={props.points}/>\n      </div>\n    </div>\n  );\n}\n\nexport default FullLineGraph;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FullLineGraph from './FullLineGraph';\n\nfunction randomWalk(x0: number, y0: number, n: number): [number, number][] {\n  const points = new Array(n);\n  let x = x0;\n  let y = y0;\n  points[0] = [x, y];\n  for (let i = 1; i < n; i++) {\n    x += (Math.random() - 0.5) * 20;\n    x = x > 100 ? 100 : x;\n    x = x < 0 ? 0 : x;\n    y += 2;\n    points[i] = [x, y];\n  }\n  return points;\n}\nReactDOM.render([\n  <p>\n    An experiment in making an interactive SVG line graph using pure HTML, CSS and SVG (i.e. without requiring client side JS).\n  </p>,\n  <p>Currently this actually is using client side JS to render the chart, but that's just for convenience.</p>,\n  <p>The actual interactions are all native HTML / CSS. Try tabbing through some links to see!</p>,\n  <FullLineGraph points={randomWalk(50, 0, 50)}/>\n], document.getElementById('root'));\n"],"sourceRoot":""}